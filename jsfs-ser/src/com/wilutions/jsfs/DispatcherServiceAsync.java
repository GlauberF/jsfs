package com.wilutions.jsfs;

/*
 * 
 * THIS FILE HAS BEEN GENERATED BY class byps.gen.j.GenRemoteClassAsync DO NOT MODIFY.
 */

import byps.*;

// checkpoint byps.gen.j.GenRemoteClassAsync:68
public interface DispatcherServiceAsync extends BRemote, 
	DispatcherService {
	/**
	 * Register a file system service.
	 * This function is called from the JSFS Agent when it starts.
	 * The JSFS Dispatcher maps the given token on the given service. The browser
	 * requests this service by a call to {@link #getService(String, boolean)}.
	 * @param token Token obtained from authentication.
	 * @param service Service object.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public void registerService(java.lang.String token, FileSystemService service) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void registerService(java.lang.String token, FileSystemService service, final BAsyncResult<Object> asyncResult) ;
	
	/**
	 * Unregister a file system service.
	 * This function is called from the JSFS Agent if it terminates.
	 * @param token Token obtained from authentication.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public void unregisterService(java.lang.String token) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void unregisterService(java.lang.String token, final BAsyncResult<Object> asyncResult) ;
	
	/**
	 * Get the file system service for the given token.
	 * @param token Token obtained from authentication.
	 * @param onlyHere false, if other JSFS Dispatcher services should be asked for the file system service too.
	 * @return File system service.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public FileSystemService getService(java.lang.String token, boolean onlyHere) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void getService(java.lang.String token, boolean onlyHere, final BAsyncResult<FileSystemService> asyncResult) ;
	
	/**
	 * Register a notify service.
	 * The notify service is implemented by JavaScript inside the web page. The JSFS Agent requests
	 * the notify service in order to send messages to the browser.
	 * @param token Token obtained from authentication.
	 * @param service Notify service.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public void registerNotifyService(java.lang.String token, FileSystemNotify service) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void registerNotifyService(java.lang.String token, FileSystemNotify service, final BAsyncResult<Object> asyncResult) ;
	
	/**
	 * Unregister a notify service.
	 * This function should be called by the browser when the web page is unloaded.
	 * @param token Token obtained from authentication.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public void unregisterNotifyService(java.lang.String token) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void unregisterNotifyService(java.lang.String token, final BAsyncResult<Object> asyncResult) ;
	
	/**
	 * Get the notify service interface for a given token.
	 * @param token Token obtained from authentication.
	 * @param onlyHere false, if other JSFS Dispatcher services should be asked for the notify service too.
	 * @return Notify service.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public FileSystemNotify getNotifyService(java.lang.String token, boolean onlyHere) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void getNotifyService(java.lang.String token, boolean onlyHere, final BAsyncResult<FileSystemNotify> asyncResult) ;
	
	/**
	 * Keep the token-to-services-associations alive.
	 * Keeps the application server session alive. If the session has already been invalidated,
	 * the BYPS framework triggers a re-login. This will cause an authentication with "Your Web Application"
	 * and the services will be registered again.
	 * @param token Token obtained from authentication.
	 * @throws RemoteException
	*/
	// checkpoint byps.gen.j.PrintContext:365
	public void keepAlive(java.lang.String token) throws RemoteException;
	// checkpoint byps.gen.j.PrintContext:409
	public void keepAlive(java.lang.String token, final BAsyncResult<Object> asyncResult) ;
	
	
}
